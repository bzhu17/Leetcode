//Description: create a class which is like array, void set(index, val) sets the element at the given index to be equal to val.
// int snap() takes a snapshot of the array and returns the snap_id: the total number of times we called snap() minus 1.
// int get(index, snap_id) returns the value at the given index, at the time we took the snapshot with the given snap_id

// We can use a map to record the version and the value, when the value of one index has changed, just change it in map, 
// so even if value changes for many times but we could get the last change, and we still need a index to represent the 
// number, at first I conside about using unordered_map<int,vector<vector<int>>>, because I want to use upper_bound to find 
// the number which is the biggest one that smaller than the snap_id, but one better solution is vector<map<int,int>>, and 
// upper_bound can not use in 2D vector but it works well in map.

class SnapshotArray {
public:
    SnapshotArray(int length) {
        v.resize(length);
        num=0;
    }
    
    void set(int index, int val) {
        v[index][num]=val;
    }
    
    int snap() {
        return num++;
    }
    
    int get(int index, int snap_id) {
        auto a=v[index].upper_bound(snap_id);
        if(a==v[index].begin()) return 0;
        else return (--a)->second;
    }
private:
    vector<map<int,int>> v;
    int num;
};

/**
 * Your SnapshotArray object will be instantiated and called as such:
 * SnapshotArray* obj = new SnapshotArray(length);
 * obj->set(index,val);
 * int param_2 = obj->snap();
 * int param_3 = obj->get(index,snap_id);
 */

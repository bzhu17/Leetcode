// Description: m x n matrix represents the heights, compute 
// the volume of water it is able to trap after raining.

// The minimum height will decide it will store or flow, and
// the boundary of the matrix is the wall, so we use a 
// priority_queue to store all boundary, and find the minimum
// height position. Then bfs, it will store surrounding heights
// if the surrounding is higher than current, top of priority_queue
// will be other positions, and if not, we will continue go
// deep in this position, so we just need to maintain a mx to
// represent the current max height, if surrouding height < mx,
// it means the surrounding could store.
// It just like we find the minimum of the boundary, and then
// bfs to find the surroundings, the minimum means it is the 
// only output of the matrix, so if height is lower than minimum,
// it will store water, untill surroundings all higher than current,
// it will find next minimum. Like continue to move the wall and
// calculate the total water.

class Solution {
public:
    int trapRainWater(vector<vector<int>>& heightMap) {
        int m=heightMap.size(),n=heightMap[0].size();
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> q;
        vector<int> visited(m*n);
        for(int i=0;i<m;++i)
            for(int j=0;j<n;++j)
            {
                if(i==0||i==m-1||j==0||j==n-1)
                {
                    q.push({heightMap[i][j],i*n+j});
                    visited[i*n+j]=1;
                }
            }
        int mx=INT_MIN,rst=0;
        while(!q.empty())
        {
            auto a=q.top();q.pop();
            mx=max(mx,a.first);
            int x=a.second/n,y=a.second%n;
            if(y>0&&visited[x*n+y-1]==0) 
            {
                q.push({heightMap[x][y-1],x*n+y-1});
                visited[x*n+y-1]=1;
                if(heightMap[x][y-1]<mx) rst+=mx-heightMap[x][y-1];
            }
            if(x>0&&visited[(x-1)*n+y]==0) 
            {
                q.push({heightMap[x-1][y],(x-1)*n+y});
                visited[(x-1)*n+y]=1;
                if(heightMap[x-1][y]<mx) rst+=mx-heightMap[x-1][y];
            }
            if(y<n-1&&visited[x*n+y+1]==0) 
            {
                q.push({heightMap[x][y+1],x*n+y+1});
                visited[x*n+y+1]=1;
                if(heightMap[x][y+1]<mx) rst+=mx-heightMap[x][y+1];
            }
            if(x<m-1&&visited[(x+1)*n+y]==0) 
            {
                q.push({heightMap[x+1][y],(x+1)*n+y});
                visited[(x+1)*n+y]=1;
                if(heightMap[x+1][y]<mx) rst+=mx-heightMap[x+1][y];
            }
        }
        return rst;
    }
};
//Description: an array sorted in ascending order, split to 1 or more subsequences with length >= 3
// [1,2,3,3,4,5]->[1,2,3],[3,4,5], [1,2,3,3,4,4,5,5]->[1,2,3,4,5],[3,4,5]

//Two unordered_map one is store how many times the number occur, and the other will store whether it 
// could appendix in the previous subsequences, it will first judge if the number could just appendix 
// with its only, and if not then will judge whether the number can be a begining

class Solution {
public:
    bool isPossible(vector<int>& nums) {
        unordered_map<int,int> m,help;
        for(auto a:nums) ++m[a];
        for(auto num:nums)
        {
            if(m[num]==0) continue;
            if(help[num]>0)
            {
                --help[num];
                ++help[num+1];
            }
            else if(m[num+1]>0&&m[num+2]>0)
            {
                --m[num+1];
                --m[num+2];
                ++help[num+3];
            }
            else return false;
            --m[num];
        }
        return true;
    }
};

//Description:lock initial with "0000", and has deadends which will dead lock and should be avoided.
// deadends = ["0201","0101","0102","1212","2002"], target = "0202", return 6("0000" -> "1000" -> "1100" -> "1200" -> "1201" -> "1202" -> "0202")

// Essentially it is a maze problem with 8 directions, the shortest path can use BFS

class Solution {
public:
int openLock(vector<string>& deadends, string target) {
	int level = 0;
	queue<string> q;
	q.push("0000");
	unordered_set<string> s, visit;
	for (auto a : deadends)
		s.insert(a);
	if (s.count("0000")) return -1;
	while (!q.empty())
	{
		++level;
		for (int k = q.size(); k > 0; --k)
		{
			string t = q.front(); q.pop();
			string t1 = t;
			t1[0] = (t1[0] == '9') ? '0' : t1[0] + 1;
			if (t1 == target) return level;
			if (!s.count(t1)) q.push(t1);
			t1 = t;
			t1[0] = (t1[0] == '0') ? '9' : t1[0] - 1;
			if (t1 == target) return level;
			if (!s.count(t1)) q.push(t1);
			t1 = t;
			t1[1] = (t1[1] == '9') ? '0' : t1[1] + 1;
			if (t1 == target) return level;
			if (!s.count(t1)) q.push(t1);
			t1 = t;
			t1[1] = (t1[1] == '0') ? '9' : t1[1] - 1;
			if (t1 == target) return level;
			if (!s.count(t1)) q.push(t1);
			t1 = t;
			t1[2] = (t1[2] == '9') ? '0' : t1[2] + 1;
			if (t1 == target) return level;
			if (!s.count(t1)) q.push(t1);
			t1 = t;
			t1[2] = (t1[2] == '0') ? '9' : t1[2] - 1;
			if (t1 == target) return level;
			if (!s.count(t1)) q.push(t1);
			t1 = t;
			t1[3] = (t1[3] == '9') ? '0' : t1[3] + 1;
			if (t1 == target) return level;
			if (!s.count(t1)) q.push(t1);
			t1 = t;
			t1[3] = (t1[3] == '0') ? '9' : t1[3] - 1;
			if (t1 == target) return level;
			if (!s.count(t1)) q.push(t1);
		}
	}
	return -1;
}
};

// Description:You are given coins of different denominations and a total amount of money. 
// Write a function to compute the number of combinations that make up that amount. 
// You may assume that you have infinite number of each kind of coin.
// amount = 5, coins = [1, 2, 5] -> 5=5,5=2+2+1,5=2+1+1+1,5=1+1+1+1+1

// Dp[i][j] means the first i coins make up how many ways of the j amount
// dp[i][j] relies on dp[i-1][j] which means does not need the coins[i-1] the total number,
// and then if j>=coins[i-1] means we could use dp[i][j-coins[i-1]] to make the combination,
// j>=coins[i-1] can make sure there must be one coins[i-1]

class Solution {
public:
    int change(int amount, vector<int>& coins) {
        vector<vector<int>> dp(coins.size()+1,vector<int>(amount+1));
        dp[0][0]=1;
        for(int i=1;i<=coins.size();++i)
        {
            dp[i][0]=1;
            for(int j=1;j<=amount;++j)
                dp[i][j]=dp[i-1][j]+(j>=coins[i-1]?dp[i][j-coins[i-1]]:0);
        }
        return dp[coins.size()][amount];
    }
};

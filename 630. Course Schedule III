// Description: Given n online courses represented by pairs (t,d), your task is to find the maximal number of courses that can be taken. t is the duration 
// of one class and d is the biggest final date.

// DFS will Time Limit Exceeded, and we need to use Greedy algorithm. First, we need to sort the array with d because we want to finish more classes in one
// date, and if the d is smaller than others, it could be finished first and do less influence on other classes. Loop the sorted array, and if the current 
// class is not suitable for previous classes, we remove the longest duration one, we want to push more classes, remove the longest class would not minus the
// rst, just no contribution to rst.

class Solution {
public:
    int scheduleCourse(vector<vector<int>>& courses) {
        sort(courses.begin(),courses.end(),[](const vector<int>&a,const vector<int>&b){return a[1]<b[1];});
        priority_queue<int> q;
        int pos=0;
        for(auto &a:courses)
        {
            pos+=a[0];
            q.push(a[0]);
            if(pos>a[1])
            {
                pos-=q.top();
                q.pop();
            }
        }
        return q.size();
    }
}; 

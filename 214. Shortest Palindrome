 // Description: a given string s, add characters in
 // front of it and return the shortest palindrome.

 // We could also use KMP, beacuse next array means the
 // longest prefix suffix. And this problem we need to 
 // find the longest palindrome in string, we could 
 // reverse the s and s+="#"+reverse, and then we build
 // next, "#" could stop the longest prefix suffix to
 // reverse, and if it is palindrome, reverse it will
 // be the same so it will be the prefix suffix.

 // It could also use Rolling Hash, palindrome means 
 // read from left to right equals to from right to left.
 // So we could calculate two numbers, one is left to right,
 // and the other is right to left, if tow numbers are equal,
 // it means it is palindrome.
 // One is hash1*Base+char, the other is hash2+char*POW
 // Base is the base and POW is the highest digital 

 class Solution {
 public:
    string shortestPalindrome(string s) {
        string st=s;
        reverse(st.begin(),st.end());
        string t=s+"#"+st;
        int j=0,n=t.size();
        vector<int> nxt={0,0};
        for(int i=1;i<n;++i)
        {
            while(j>0&&t[i]!=t[j])
                j=nxt[j];
            if(t[i]==t[j])
                ++j;
            nxt.push_back(j);
        }
        return st.substr(0,s.size()-nxt.back())+s;
    }
};

class Solution {
public:
    string shortestPalindrome(string s) {
        int n=s.size(),p=-1;
        long B=29,MOD=1000000007,POW=1,hash1=0,hash2=0;
        for(int i=0;i<n;++i,POW=POW*B%MOD)
        {
            hash1=(hash1*B+s[i]-'a'+1)%MOD;
            hash2=(hash2+(s[i]-'a'+1)*POW)%MOD;
            if(hash1==hash2) p=i;
        }
        string str=s.substr(p+1);
        reverse(str.begin(),str.end());
        return str+s;
    }
};

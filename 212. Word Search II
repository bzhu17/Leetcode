// Description: find string whether could be constructed from letters of sequentially adjacent cell.

// Trie + dfs, set the finding words as trie and then loop 2D vector, if the char in trie, dfs

class Solution {
public:
    struct TrieNode{
        TrieNode* child[26];
        string str;
        TrieNode():str(""){
            for(auto &a:child) a=nullptr;
        }
    };
    struct Trie{
        TrieNode* root;
        Trie(){ root=new TrieNode();}
        void insert(string s)
        {
            TrieNode* t=root;
            for(auto &a:s)
            {
                int c=a-'a';
                if(!t->child[c]) t->child[c]=new TrieNode();
                t=t->child[c];
            }
            t->str=s;
        }
    };
    void search(vector<vector<char>>& board,vector<vector<int>>& visited,vector<string>& rst,TrieNode* t,int x,int y)
    {
        visited[x][y]=1;
        if(!t->str.empty()) 
        {
            rst.push_back(t->str);
            t->str.clear();
        }
        if(y>0&&visited[x][y-1]==0&&t->child[board[x][y-1]-'a'])
            search(board,visited,rst,t->child[board[x][y-1]-'a'],x,y-1);
        if(x>0&&visited[x-1][y]==0&&t->child[board[x-1][y]-'a'])
            search(board,visited,rst,t->child[board[x-1][y]-'a'],x-1,y);
        if(y<board[0].size()-1&&visited[x][y+1]==0&&t->child[board[x][y+1]-'a'])
            search(board,visited,rst,t->child[board[x][y+1]-'a'],x,y+1);
        if(x<board.size()-1&&visited[x+1][y]==0&&t->child[board[x+1][y]-'a']) 
            search(board,visited,rst,t->child[board[x+1][y]-'a'],x+1,y);
        visited[x][y]=0;
    }
    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {
        vector<string> rst;
        if(board.empty()||board[0].empty()||words.empty()) return rst;
        int m=board.size(),n=board[0].size();
        vector<vector<int>> visited(m,vector<int>(n));
        Trie t;
        for(auto &a:words)
            t.insert(a);
        for(int i=0;i<m;++i)
            for(int j=0;j<n;++j)
            {
                if(t.root->child[board[i][j]-'a'])
                {
                    search(board,visited,rst,t.root->child[board[i][j]-'a'],i,j);
                }
            }
        return rst;
    }
};

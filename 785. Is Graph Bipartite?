// Description: 2D vector means the ith node has the line with the node like [[1,2],[0,2]] means
// 0th node links 1 and 2, 1th node links 0 and 2. Graph Bipartite means two nodes of one line could
// be divided to different group and there are total 2 groups. 

// At first I think I could use dfs to run all loops, with one while and a visited and when not all
// nodes are visited I still need loop becuase there are maybe many cycles. But we can use just one
// vector initilizes with 0, and when the value is not 0 it means it has been visited, so we do not 
// need to use visited vector. And while(1) also can be instead of a for() loop with n times, we just
// need to consider the colors[i] is 0 it means it has been not visited.

// We can also use Union Find, but it will check each node with for loop, so maybe it is not faster.
// We can find root with the node and the first link node in graph and compare their root, if they are
// same return false, and then check each node in graph, if same return false, others set root as the 
// first node's root.

class Solution {
public:
    bool isBipartite(vector<vector<int>>& graph) {
        int n=graph.size();
        vector<int> colors(n);
        for(int i=0;i<n;++i)
        {
            if(colors[i]!=0) continue;
            colors[i]=1;
            queue<int> s{{i}};
            while(!s.empty())
            {
                int tmp=s.front();s.pop();
                for(auto a:graph[tmp])
                {
                    if(colors[tmp]==colors[a]) return false;
                    if(colors[a]==0)
                    {
                        colors[a]=-colors[tmp];
                        s.push(a);
                    }
                }
            }
        }
        return true;
    }
};

class Solution {
public:
    int find(vector<int>& root,int i)
    {
        return root[i]==i?i:find(root,root[i]);
    }
    bool isBipartite(vector<vector<int>>& graph) {
        int n=graph.size();
        vector<int> root(n);
        for(int i=0;i<n;++i) root[i]=i;
        for(int i=0;i<n;++i)
        {
            if(graph[i].empty()) continue;
            int x=find(root,i),y=find(root,graph[i][0]);
            if(x==y) return false;
            for(int j=1;j<graph[i].size();++j)
            {
                int z=find(root,graph[i][j]);
                if(x==z) return false;
                root[graph[i][j]]=y;
            }
        }
        return true;
    }
};

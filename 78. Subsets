// Description: Given a set of distinct integers,
// return all possible subsets (the power set).

// We could use dfs to make the combination or 
// permunation. m represents the total, and n 
// means how many we take. Becuase it is combination
// so we also need a interger s to represent 
// the next position we take. We push_back it 
// to current vector, and recursive and pop it,
// go to next loop. And we do not need m, becuase
// it will no influence, when current size equals
// to n, return. The main function loop needs from
// 0 to vector size, because 0 will give {}, and 
// equals to vector size means we get m from m.

// We could also use Bit to do, because if the vector
// is n size, the total situation will be 2^n
// 000->{}, 001->{3}, 101->{1,3}
// [0,2^n-1] will cover all situations, so we just
// need to consider the bit which is 1 and give it 
// the number, we could get all combinations

class Solution {
public:
    void dfs(vector<int>& nums,int n,int s,vector<int>&cur,vector<vector<int>>& rst)
    {
        if(cur.size()==n)
        {
            rst.push_back(cur);return;
        }
        for(int i=s;i<nums.size();++i)
        {
            cur.push_back(nums[i]);
            dfs(nums,n,i+1,cur,rst);
            cur.pop_back();
        }
    }
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int>> rst;
        vector<int> cur;
        for(int i=0;i<=nums.size();++i)
            dfs(nums,i,0,cur,rst);
        return rst;
    }
};

class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        int n=nums.size();
        vector<vector<int>> rst;
        for(int i=0;i<1<<n;++i)
        {
            vector<int> tmp;
            for(int j=0;j<n;++j)
            {
                if(i&(1<<j)) tmp.push_back(nums[j]);
            }
            rst.push_back(tmp);
        }
        return rst;
    }
};
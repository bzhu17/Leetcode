// Description: a given vector returns all possilbe 3 sums equal to 0

// We could first sort the array and then fixed one number, and use two pointer to find two sum equals to -(fixed one),
// after sorted, if the first one is bigger than 0 means no result, the last one is smaller than 0 also means no result.
// When two pointes sum equals to fixed one, we need to ++left to no duplicated one and the right is the same.

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        int n=nums.size();
        sort(nums.begin(),nums.end());
        if(nums.empty()||nums.front()>0||nums.back()<0) return {};
        vector<vector<int>> rst;
        for(int i=0;i<=n-3;++i)
        {
            if(nums[i]>0) break;
            if(i>0&&nums[i]==nums[i-1]) continue;
            int target=0-nums[i],left=i+1,right=n-1;
            while(left<right)
            {
                if(target==nums[left]+nums[right])
                {
                    rst.push_back({nums[i],nums[left],nums[right]});
                    while(left<right&&nums[left]==nums[left+1]) ++left;
                    while(left<right&&nums[right]==nums[right-1]) --right;
                    ++left;--right;
                }
                else if(target>nums[left]+nums[right]) ++left;
                else --right;
            }
        }
        return rst;
    }
};

//Description:has the same charactors but can with different orders called anagrams,"cbaebabacd","abc"->[0,6]

//Use vector could decrease the time that use other structrues and to could just use = to compare two string
// equals or not

//It also could use sliding window, use cnt represents the number of charactor still needed in string, right 
// plus 1 every time, and if the right charactor is in string, cnt minus 1, and if cnt equals to 0, rst push_back
// left, and if the distance between left and right is equal to "abc" length, if the left charactor is in "abc", 
// cnt plus 1

vector<int> findAnagrams(string s, string p) {
    if (s.empty()||s.size()<p.size()) return {};
    vector<int> res, m1(256, 0), m2(256, 0);
    for (int i = 0; i < p.size(); ++i) {
        ++m1[s[i]]; ++m2[p[i]];
    }
    if (m1 == m2) res.push_back(0);
    for (int i = p.size(); i < s.size(); ++i) {
        ++m1[s[i]]; 
        --m1[s[i - p.size()]];
        if (m1 == m2) res.push_back(i - p.size() + 1);
    }
    return res;
}

//Sliding Window
class Solution {
public:
    vector<int> findAnagrams(string s, string p) {
        if(s.empty()) return {};
        vector<int> v(256),rst;
        for(auto a:p) ++v[a];
        int left=0,right=0,n=s.size(),cnt=p.size();
        while(right<n)
        {
            if(v[s[right++]]-->=1) --cnt;
            if(cnt==0) rst.push_back(left);
            if(right-left==p.size()&&v[s[left++]]++>=0) ++cnt;
        }
        return rst;
    }
};

